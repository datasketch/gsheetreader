{"version":3,"file":"gsheetreader.min.mjs","sources":["../src/main.js","../src/utils.js"],"sourcesContent":["import { makeQuery } from './utils';\n\nexport default class GSheetReader {\n  getTable(entries) {\n    const table = [];\n    const cols = Math.max(...entries.map((entry) => +entry.gs$cell.col));\n    const rows = Math.max(...entries.map((entry) => +entry.gs$cell.row));\n\n    for (let index = 0; index < rows; index++) {\n      const row = Array(cols);\n      table.push(row);\n    }\n\n    for (const entry of entries) {\n      const row = +entry.gs$cell.row;\n      const col = +entry.gs$cell.col;\n      table[row - 1][col - 1] = +entry.gs$cell.numericValue || entry.gs$cell.$t;\n    }\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < table[row].length; col++) {\n        if (!table[row][col]) {\n          table[row][col] = '';\n        }\n      }\n    }\n\n    return { table, size: { cols, rows } };\n  }\n\n  async getJSON(id) {\n    const endpoint =\n      'https://spreadsheets.google.com/feeds/cells/' +\n      id +\n      '/1/public/values?alt=json';\n    try {\n      const entries = await makeQuery(endpoint);\n      const { table, size } = this.getTable(entries);\n      const headers = table.shift();\n      const data = table.map((row) => {\n        return row.reduce((record, value, index) => {\n          record[headers[index]] = value;\n          return record;\n        }, {});\n      });\n\n      return {\n        data,\n        headers,\n        size,\n      };\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n}\n","async function makeQuery(endpoint) {\n  try {\n    const response = await fetch(endpoint);\n    const responseJSON = await response.json();\n    return responseJSON.feed.entry;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport { makeQuery }"],"names":["[object Object]","entries","table","cols","Math","max","map","entry","gs$cell","col","rows","row","index","Array","push","numericValue","$t","length","size","id","endpoint","async","response","fetch","json","feed","error","Error","makeQuery","this","getTable","headers","shift","data","reduce","record","value"],"mappings":"eAEe,MACbA,SAASC,GACP,MAAMC,EAAQ,GACRC,EAAOC,KAAKC,OAAOJ,EAAQK,KAAKC,IAAWA,EAAMC,QAAQC,OACzDC,EAAON,KAAKC,OAAOJ,EAAQK,KAAKC,IAAWA,EAAMC,QAAQG,OAE/D,IAAK,IAAIC,EAAQ,EAAGA,EAAQF,EAAME,IAAS,CACzC,MAAMD,EAAME,MAAMV,GAClBD,EAAMY,KAAKH,GAGb,IAAK,MAAMJ,KAASN,EAAS,CAC3B,MAAMU,GAAOJ,EAAMC,QAAQG,IACrBF,GAAOF,EAAMC,QAAQC,IAC3BP,EAAMS,EAAM,GAAGF,EAAM,IAAMF,EAAMC,QAAQO,cAAgBR,EAAMC,QAAQQ,GAGzE,IAAK,IAAIL,EAAM,EAAGA,EAAMD,EAAMC,IAC5B,IAAK,IAAIF,EAAM,EAAGA,EAAMP,EAAMS,GAAKM,OAAQR,IACpCP,EAAMS,GAAKF,KACdP,EAAMS,GAAKF,GAAO,IAKxB,MAAO,CAAEP,MAAAA,EAAOgB,KAAM,CAAEf,KAAAA,EAAMO,KAAAA,IAGhCV,cAAcmB,GACZ,MAAMC,EACJ,+CACAD,EACA,4BACF,IACE,MAAMlB,QCpCZoB,eAAyBD,GACvB,IACE,MAAME,QAAiBC,MAAMH,GAE7B,aAD2BE,EAASE,QAChBC,KAAKlB,MACzB,MAAOmB,GACP,MAAM,IAAIC,MAAMD,ID8BQE,CAAUR,IAC1BlB,MAAEA,EAAKgB,KAAEA,GAASW,KAAKC,SAAS7B,GAChC8B,EAAU7B,EAAM8B,QAQtB,MAAO,CACLC,KARW/B,EAAMI,KAAKK,GACfA,EAAIuB,QAAO,CAACC,EAAQC,EAAOxB,KAChCuB,EAAOJ,EAAQnB,IAAUwB,EAClBD,IACN,MAKHJ,QAAAA,EACAb,KAAAA,GAEF,MAAOQ,GACP,MAAM,IAAIC,MAAMD"}